public class post
{
	static int cat = nan;
	static object item = null;
}

extern void object::B21()
{
	Research(ResearchWinged);
	Builder(BotFactory, 7.5);
	BuildBot(WingedGrabber, "Ore");
	errgoto(radar(SpaceShip).position);
}

point FindSpace(int cat, float rad)
{
	object item = radar(cat);
	point pos;
	float r = 0;
	ipf(10000);
	while(true)
	{
		for(int i = 0; i < 360; i += 5)
		{
			pos.x = item.position.x + r*cos(i);
			pos.y = item.position.y + r*sin(i);
			pos = flatspace(pos, rad, rad, 50, rad);
			if(flatground(pos, 50) >= rad && topo(pos) > 1) return pos;
		}
		r += 20;
	}
	return pos;
}

void Builder(int cat, float rad)
{
	post info = new post();
	GrabCat(Titanium);
	point place = FindSpace(SpaceShip, rad);
	errgoto(place);
	move(-1.5);
	drop();
	info.cat = cat;
	info.item = radar(Titanium);
	place = FindSpace(Titanium, rad/2);
	errgoto(place);
	while(radar(cat) == null) wait(1);
}

void Research(int res)
{
	if(researched(res)) return;
	if(radar(ResearchCenter) == null) Builder(ResearchCenter, 5);
	BringTo(PowerCell, ResearchCenter);
	research(res);
	while(!researched(res)) wait(1);
}

void object::BuildBot(int cat, string prog)
{
	BringTo(Titanium, BotFactory);
	move(-7);
	factory(cat, prog);
	BringTo(PowerCell, cat);
	move(-7);
}

void GrabCat(int cat)
{
	object item = radar(cat, 0, 360, 3);
	errgoto(item.position);
	grab();
}

void BringTo(int cat, int target, int angle = 0)
{
	GrabCat(cat);
	while(radar(target) == null) wait(1);
	object item = radar(target);
	errgoto(item.position);
	turn(angle);
	drop();
}

public void object::Ore()
{
	object item;
	while(this.energyCell == null) wait(1);
	while(radar(Any, 180, 10, 1, 7) != null) wait(1);
	move(-7);
	for(int i = 0; i < 4; i++)
	{
		BringTo(TitaniumOre, SpaceShip, i*45 - 45);
	}
}

public void errgoto(point pos)
{
	errmode(0);
	int err = goto(pos);
	while(err != 0) err = goto(pos);
	errmode(1);
}
